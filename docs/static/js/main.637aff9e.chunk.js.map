{"version":3,"sources":["helpers/fun.js","redux/types/types.js","helpers/parametros.js","redux/ducks/EstadosDuck.js","helpers/parametrosHopitales.js","redux/ducks/HospitalesDuck.js","redux/ducks/PlanetasDuck.js","redux/store/rootReducer.js","redux/store/store.js","components/Estado.jsx","components/Parametros.jsx","components/EstadosComponent.jsx","helpers/urls.js","components/Contenedor.jsx","components/hospitales/Hospital.jsx","components/hospitales/ParametrosHospital.jsx","components/hospitales/HospitalesComponent.jsx","components/hospitales/ContenedorHospitales.jsx","components/interactivo/componentesThree/Controls/Controls.jsx","components/interactivo/componentesThree/Navigation/Navigation.jsx","components/interactivo/componentesThree/NavLink/NavLink.jsx","components/interactivo/componentesThree/NavsHospitales/NavH.jsx","components/interactivo/componentesThree/NavsHospitales/NavsHospitales.jsx","components/interactivo/componentesThree/Marker/Marker.jsx","components/interactivo/componentesThree/Marker/CMarker.jsx","helpers/colores.js","components/interactivo/componentesThree/Room/Room.js","components/interactivo/componentesThree/Room/CRoom.jsx","components/interactivo/CPlanetas.jsx","components/interactivo/componentesThree/ContenedorPlanetas.jsx","router/AppRouter.jsx","App.jsx","config/DBConfig.js","index.js"],"names":["random","Random","removeRepeats","dataArray","setHelper","Set","Array","from","losDatos","urlGeneral","a","Axios","get","data","console","log","alertas","estatus_capacidad_hospitalaria","backgroundColor","color","convertirFecha","fechaInicial","replace","formatearFechas","fecha","mes","getMonth","length","getFullYear","getDate","types","parametros","initialState","datos","numeroRegistros","setParametros","facet","type","payload","diaHoy","hoy","ayer","fechaServidor","putDatos","dGenerales","parametrosHospitales","datosH","parametrosH","fechaH","fechaHInput","numeroRegistrosH","nombresHospitales","hoyF","setFechaInput","setHospitalesp","hospitales","setTitulo","titulo","setNombresH","nombres","setParametrosH","rootReducer","combineReducers","state","action","planetas","nombreHospitales","markersRedux","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Estado","fields","sector","sospechosos","indigena","fecha_ingreso","fecha_def","inmusupr","id_registro","entidad_res","tipo_paciente","uci","cardiovascular","clasificacion_final","neumonia","hipertension","entidad_um","toma_muestra_antigeno","epoc","asma","origen","toma_muestra_lab","nacionalidad","pais_origen","rango_edad","embarazo","municipio_res","sexo","obesidad","habla_lengua_indi","intubado","fecha_actualizacion","fecha_sintomas","diabetes","edad","resultado_lab","clas_final_escrita","pais_nacionalidad","tabaquismo","otra_com","migrante","resultado_antigeno","entidad_nac","otro_caso","renal_cronica","style","Parametros","EstadosComponent","db","useIndexedDB","dispatch","useDispatch","useSelector","handleChange","e","numero","target","value","useEffect","add","then","getAll","res","arrSinDuplicaciones","arrayBase","baseLimpia","filter","base","undefined","set","map","JSON","stringify","parse","yaEstaEnBase","className","name","id","defaultValue","min","max","step","required","onChange","height","recordid","urlHospitales","cantidad","Contenedor","url","datosCompletos","records","getState","moment","format","subtract","dato","record_timestamp","fechaHoy","fechaRest","getDatos","Hospital","coordenadas","institucion","nombre_hospital","estatus_capacidad_uci","ParametrosHospital","HospitalesComponent","useState","fechaInputS","setFechaIntputS","nombresDeLosHospitales","datoH","fechaI","fechaFormateada","setInputFechaDuck","htmlFor","nombre","ContenedorHospitales","numeroRegistrosHospitales","Date","fechaStageH","result","getDatosH","Controls","autoRotate","enabled","controls","useRef","useThree","camera","gl","useFrame","current","update","OrbitControls","ref","args","domElement","enableDamping","enableZoom","enableKeys","enablePan","dampingFactor","rotateSpeed","autoRotateSpeed","Navigation","cameraPosition","cameraTarget","position","lookAt","updateProjectionMatrix","NavLink","props","hovered","setHovered","AnimatedNavLink","animated","Nav","Link","linkSpring","useSpring","transform","padding","margin","borderRadius","onPointerOver","onPointerOut","onClick","onNavLinkClicked","cameraPos","NavH","markers","onNavigationItemClicked","marker","NavsHospitales","aria-describedby","defaultActiveKey","Marker","markerSpring","opacity","config","slow","infoSpring","display","selected","Html","scaleFactor","div","onMarkerClicked","CMarker","selectedItemIndex","markers2","setmarkerNow","maker","colores","Room","group","planet","colorH","col","colorPlaneta","dispose","visible","userData","test","attach","CRoom","initialCameraPos","initialControlsTarget","extend","CPlanetas","markerRedux","bandera","setBandera","loc","forEach","uno","integer","dos","tres","crearMaker","AnimatedNavigation","isAnimating","setIsAnimating","cachedPos","cachedTarget","pos","cameraValues","setCameraValues","cameraSpring","onRest","alert","intensity","Stars","radius","depth","count","factor","saturation","fade","ContenedorPlanetas","parameters","nombresH","record","datasetid","getHospitalesP","AppRouter","exact","path","component","to","initDB","version","objectStoresMeta","storeConfig","keypath","autoIncrement","storeSchema","options","unique","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.637aff9e.chunk.js","sourcesContent":["import { Random } from 'random-js';\nimport { moment } from 'moment';\nimport Axios from \"axios\"\n\nconst random = new Random()\n\nexport const removeRepeats = ( dataArray ) => {\n    let setHelper = new Set( dataArray )\n    let arreglo = Array.from(setHelper)\n    return [\n        arreglo\n    ]\n}\n\n\nexport const obtenerItem = ( nombreItem ) => {\n        let res = {}\n        if ( localStorage.getItem(nombreItem)) {\n            res = localStorage.getItem(nombreItem)\n        }\n\n\n        \n    return  res \n}\n\nexport const setValorLocal = ( nombreITem , valorItem ) => {\n    let valorsito = JSON.stringify(valorItem)\n    console.log( valorItem )\n    localStorage.setItem( nombreITem , valorsito  )\n}\n\n\nexport const convertString = ( ...valores ) => {\n    let nuevosValores = valores.map( valor => {\n        return JSON.stringify(valor)\n    })\n    return [\n        nuevosValores\n    ]\n}\n\n\nexport const losDatos = async ( urlGeneral ) => {\n    const { data } = await Axios.get( urlGeneral )\n    console.log(data)\n    return data\n}\n\n\nexport const yaEstaEnBase = (arrayBase) => {\n    let baseLimpia = arrayBase.filter(base=> {\n        return base.fecha !== undefined && base.datos.length !== 0\n    } )\n\n    let set = new Set( baseLimpia.map( JSON.stringify ) )\n    let arrSinDuplicaciones = Array.from( set ).map( JSON.parse );\n\n\n    return {\n        arrSinDuplicaciones\n    }\n        \n    \n}\n\n\nexport const fechaHoy = ( ) => {\n    let hoy = moment().format('DD-MM-YYYY')\n    return {\n        hoy\n    }\n}\nexport  const alertas = (estatus_capacidad_hospitalaria)=> {\n    \n    switch (estatus_capacidad_hospitalaria) {\n        case 'Crítica':\n            return {\n                backgroundColor : 'red',\n                color: 'white'\n            }\n    \n        case 'Media' : \n            return {\n            backgroundColor : '#f0ad4e',\n                color: 'black' \n        }        \n        case 'Buena' : \n            return {\n            backgroundColor : '#5cb85c',\n                color: 'white' \n            }   \n            \n        default :\n            return {}\n\n\n    }\n}\n\n\n\n\n    export const convertirFecha = ( fechaInicial ) => {\n        // 2020%2F12%2F20\n    let tipoFecha = fechaInicial.replace(/-/g , '%2F')\n\n\n        return [\n            tipoFecha\n        ]\n    }\n\nexport const formatearFechas = ( fecha ) => {\n    let mes \n    if( (fecha.getMonth()+1).length === 1  ){\n        mes = `0${fecha.getMonth()+1}`\n    }else {\n        mes = fecha.getMonth()+1\n    }\n\n    let nuevaFecha =  `${fecha.getFullYear()}-${ mes }-${fecha.getDate()}`  \n    return [\n        nuevaFecha\n    ]\n}\n\n\nexport const crearMaker = ( datos ) => {\n    let markers2 = [{\n        position: [0, 0, 0],\n        cameraPos: [18, 18, 18],\n        id : 0 ,\n        name: \"camaraCentral\" ,\n        loc : []\n    }]\n    let id = 1\n    datos.forEach(dato => {\n        let uno = random.integer(-100,100)\n        let dos = random.integer(-100,100)\n        let tres = random.integer(-100,100)\n        \n        markers2 = [\n            ...markers2 ,\n                {\n            position:[uno , dos , tres],\n            cameraPos : [uno , dos  , tres + 10],\n            name: dato.fields.nombre_hospital ,\n            id : id ,\n            loc : dato.fields.coordenadas\n            }\n        ]\n        id ++\n        })\n\n        return [\n            markers2\n        ]\n}\n\n\n\n\n","export const types = {\n    datosGenerales : '[data] datos generales' ,\n    fechaDHoy : '[date] fecha de hoy',\n    parametros : '[params] parametros',\n    numeroRegistros : '[registros] numero de registros',\n\n    datosGeneralesHospitales : '[dataHospitales] datos generales' ,\n    fechaDHoyHospitales : '[dataHospitales] fecha de hoy',\n    parametrosHospitales : '[dataHospitales] parametros',\n    numeroRegistrosHospitales : '[dataHospitales] numero de registros',\n    nombreHospitales : '[dataHospitales] nombre de hospitales',\n    fechaInput : '[dataHospitales] fecha del input' ,\n\n    tituloPlanetas : '[dataPlanetas] titulo',\n    datosPlanetas : '[dataPlanetas] datos',\n    nombreHospitalesPlanetas : '[dataPlanetas] nombreHospitales',\n    parametrosPlanetas : '[dataPlanetas] parametros',\n    fechaPlanetas : '[dataPlanetas] fechas' ,\n    makers : '[dataPlanetas] makers'\n\n    \n}","export const parametros = {\n    'sector' : 'sector' ,\n    'sospechosos' : 'sospechosos' ,\n    'indigena' : 'indigena' ,\n    'fecha_ingreso' : 'fecha_ingreso' ,\n    'fecha_def' : 'fecha_def' ,\n    'inmusupr' : 'inmusupr' ,\n    'id_registro' : 'id_registro' ,\n    'entidad_res' : 'entidad_res' ,\n    'tipo_paciente' : 'tipo_paciente' ,\n    'uci' : 'uci' ,\n    'cardiovascular' : 'cardiovascular' ,\n    'clasificacion_final' : 'clasificacion_final' ,\n    'neumonia' : 'neumonia' ,\n    'hipertension' : 'hipertension' ,\n    'entidad_um' : 'entidad_um' ,\n    'toma_muestra_antigeno' : 'toma_muestra_antigeno' ,\n    'epoc' : 'epoc' ,\n    'asma' : 'asma' ,\n    'origen' : 'origen' ,\n    'toma_muestra_lab' : 'toma_muestra_lab' ,\n    'nacionalidad' : 'nacionalidad' ,\n    'pais_origen' : 'pais_origen' ,\n    'rango_edad' : 'rango_edad' ,\n    'embarazo' : 'embarazo' ,\n    'municipio_res' : 'municipio_res' ,\n    'sexo' : 'sexo' ,\n    'obesidad' : 'obesidad' ,\n    'habla_lengua_indi' : 'habla_lengua_indi' ,\n    'intubado' : 'intubado' ,\n    'fecha_actualizacion' : 'fecha_actualizacion' ,\n    'fecha_sintomas' : 'fecha_sintomas' ,\n    'diabetes' : 'diabetes' ,\n    'edad' : 'edad' ,\n    'resultado_lab' : 'resultado_lab' ,\n    'clas_final_escrita' : 'clas_final_escrita' ,\n    'pais_nacionalidad' : 'pais_nacionalidad' ,\n    'tabaquismo' : 'tabaquismo' ,\n    'otra_com' : 'otra_com' ,\n    'migrante' : 'migrante' ,\n    'resultado_antigeno' : 'resultado_antigeno' ,\n    'entidad_nac' : 'entidad_nac' ,\n    'otro_caso' : 'otro_caso' ,\n    'renal_cronica' : 'renal_cronica' \n}","import { removeRepeats } from './../../helpers/fun';\nimport moment from \"moment\";\nimport { types } from \"../types/types\";\nimport { parametros } from '../../helpers/parametros';\n\nconst initialState = {\n    datos : []  ,\n    parametros : [] ,\n    fecha : {} ,\n    numeroRegistros : 50 \n}\n\nexport const estadoReducer = ( state = initialState , action ) => {\n    switch ( action.type ) {\n        case types.datosGenerales:\n            return {\n                ...state , \n                datos : action.payload\n            }\n\n        case types.fechaDHoy : \n            return {\n                ...state ,\n                fecha : action.payload\n            }\n\n        case types.parametros : \n            return {\n                ...state ,\n                parametros : action.payload\n            }\n        case types.numeroRegistros :\n            return {\n                ...state ,\n                numeroRegistros : action.payload\n            }\n        \n    \n        default:\n            return state;\n    }\n}\n\nexport const getDatos = ( datosCompletos )=> {\n\n    const { records } = datosCompletos\n    return async( dispatch , getState  )=> {\n\n            const hoy = moment().format('DD-MM-YYYY')\n            const ayer  = moment().subtract(1 , 'd').format('DD-MM-YYYY')\n            const [ fechaHoy ] = removeRepeats( (records.map( dato => dato.record_timestamp )) )\n            console.log( fechaHoy )\n            const fechaRest = moment(fechaHoy[0]).format('DD-MM-YYYY')\n    \n            dispatch( putDatos( records ) ) \n            dispatch( diaHoy( hoy , ayer ,fechaRest ) )\n            dispatch( setParametros(parametros) )\n\n    \n\n    \n    \n    }\n}\n\n\nconst setParametros = ( facet ) => ({\n    type : types.parametros ,\n    payload :facet\n})\n\nconst diaHoy = ( hoy , ayer , fechaServidor )=> ({\n    type : types.fechaDHoy ,\n    payload: { hoy , ayer , fechaServidor}\n})\n\nconst putDatos = ( dGenerales )=> ({\n    type : types.datosGenerales,\n    payload: dGenerales\n})\n\nexport const setNumeroRegistros = ( numero ) => ({\n    type : types.numeroRegistros,\n    payload : numero\n})\n\n","export const parametrosHospitales = {\n    'estatus_capacidad_hospitalaria' : 'estatus_capacidad_hospitalaria',\n    'fecha' : 'fecha',\n    'coordenadas' : 'coordenadas',\n    'institucion' : 'institucion',\n    'nombre_hospital' : 'nombre_hospital',\n    'estatus_capacidad_uci' : 'estatus_capacidad_uci',\n}","import { formatearFechas, convertirFecha } from './../../helpers/fun';\nimport { parametrosHospitales } from '../../helpers/parametrosHopitales';\nimport { types } from './../types/types';\n\nconst initialState = {\n    datosH : []  ,\n    parametrosH : [] ,\n    fechaH : {} ,\n    fechaHInput: {},\n    numeroRegistrosH : 50,\n    nombresHospitales : []\n}\n\nexport const hospitalesReducer = ( state = initialState , action ) => {\n    switch ( action.type ){\n        case types.datosGeneralesHospitales:\n            return {\n                ...state , \n                datosH : action.payload\n            }\n\n        case types.fechaDHoyHospitales : \n            return {\n                ...state ,\n                fechaH : action.payload\n            }\n\n        case types.parametrosHospitales : \n            return {\n                ...state ,\n                parametrosH : action.payload\n            }\n        case types.numeroRegistrosHospitales :\n            return {\n                ...state ,\n                numeroRegistrosH : action.payload\n            }\n        case types.nombreHospitales :\n            return {\n                ...state ,\n                nombresHospitales : action.payload.nombres\n\n            }\n        case types.fechaInput :\n            return {\n                ...state ,\n                fechaHInput : action.payload\n            }\n    \n        \n    \n        default:\n            return state;\n    }\n}\n\n\n\nexport const getDatosH = ( datosCompletos )=> {\n\n    const { records } = datosCompletos\n    console.log(records)\n    return async( dispatch , getState  )=> {\n\n        \n            dispatch( putDatos( records ) ) \n\n            dispatch( setParametros(parametrosHospitales) )\n\n    \n\n    \n    \n    }\n}\n\nexport const setInputFechaDuck = ( fechaI ) => {\n    \n\n    const [ fechaFormateada ] = convertirFecha(fechaI)\n\n    return async ( dispatch ) => {\n        dispatch( \n            setFechaInput( {\n                fechaI,\n                fechaFormateada\n            } )\n        )\n    }\n}\n\nexport const setNombreHospitales = ( nombres ) => (\n    {\n        type: types.nombreHospitales ,\n        payload: {\n            nombres\n        }\n    }\n)\n\nexport const fechaStageH = ( ) => {\n    let fecha = new Date() \n    let [hoy] = formatearFechas( fecha )\n    let [hoyF] = convertirFecha(hoy)\n\n    return async( dispatch , getState  )=> {\n        dispatch(\n            diaHoy({\n                hoy,\n                hoyF\n            })\n        )\n    }\n    \n}\n\n\n\n\nconst setParametros = ( facet ) => ({\n    type : types.parametrosHospitales ,\n    payload :facet\n})\n\nexport const diaHoy = ( hoy , hoyF )=> ({\n    type : types.fechaDHoyHospitales ,\n    payload: {hoy , hoyF} \n})\n\n\n\nexport const putDatos = ( dGenerales )=> ({\n    type : types.datosGeneralesHospitales,\n    payload: dGenerales\n})\n\nexport const setNumeroRegistros = ( numero ) => ({\n    type : types.numeroRegistrosHospitales,\n    payload : numero\n})\n\nexport const setFechaInput = ( fecha ) => ({\n    type: types.fechaInput ,\n    payload: {fecha}\n})\n\n","import { types } from \"../types/types\";\n\nconst initialState = {\n    \"titulo\" : '' ,\n    \"datos\" : [],\n    \"nombreHospitales\" : [] ,\n    \"parametros\" : [],\n    \"fecha\" : {} ,\n    \"markersRedux\" : []\n}\n\nexport const PlanetasDuck = ( state = initialState , action) => {\n    switch ( action.type ) {\n        case  types.datosPlanetas :\n            return {\n                ...state ,\n                datos : action.payload \n            }\n        case types.tituloPlanetas :\n            return {\n                ...state ,\n                titulo : action.payload\n                \n            }\n        case types.nombreHospitalesPlanetas :\n            return {\n                ...state ,\n                nombreHospitales : action.payload\n                \n            }\n        case types.parametrosPlanetas :\n            return {\n                ...state ,\n                parametros : action.payload\n            }\n        case types.fechaPlanetas :\n            return {\n                ...state ,\n                fecha : action.payload\n            }\n        case types.makers :\n            return {\n                ...state ,\n                markersRedux : action.payload\n            }\n        \n\n        default: \n        return state\n    }\n}\n\nexport const getHospitalesP = ( datos )=> {\n    \n    const { records , parameters:{facet} } = datos\n        const nombresH = records.map(record=> {\n            return record.fields.nombre_hospital\n        })\n        \n        let titulo = (records[0].datasetid).replace(/-/g , ' ')\n        console.log( titulo )\n    \n        return async( dispatch )=> {\n        \n        \n        dispatch(\n            setHospitalesp( records )\n        )\n\n        dispatch(\n            setTitulo(titulo)\n        )\n\n        dispatch(\n            setNombresH( nombresH )\n        )\n        dispatch(\n            setParametrosH( facet )\n        )\n    }\n}\n\nexport const setFechaPlanetas = ( fecha ) => ({\n    type: types.fechaPlanetas ,\n    payload : fecha\n})\n\nexport const setMakers = ( makers ) => ({\n    type : types.makers ,\n    payload : makers\n})\n\nconst setHospitalesp = ( hospitales ) =>({\n    type: types.datosPlanetas ,\n    payload : hospitales\n})\n\nconst setTitulo = ( titulo ) => (\n    {\n        type : types.tituloPlanetas,\n        payload : titulo\n    }\n)\n\nconst setNombresH = ( nombres ) => (\n    {\n        type: types.nombreHospitalesPlanetas ,\n        payload : nombres\n    }\n)\n\nconst setParametrosH = ( parametros ) => (\n    {\n        type : types.parametrosPlanetas ,\n        payload : parametros\n    }\n)\n\n\n","import { combineReducers } from \"redux\";\nimport { estadoReducer } from \"../ducks/EstadosDuck\";\nimport { hospitalesReducer } from \"../ducks/HospitalesDuck\";\nimport { PlanetasDuck } from \"../ducks/PlanetasDuck\";\n\n\nexport const rootReducer = combineReducers({\n    datos : estadoReducer ,\n    hospitales : hospitalesReducer ,\n    planetas : PlanetasDuck\n})","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { rootReducer } from \"./rootReducer\";\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n    rootReducer ,\n    composeEnhancers(\n        applyMiddleware( thunk )\n    )\n)","import React, { Fragment } from 'react'\n\nexport const Estado = (  {fields}  ) => {\n\n    const estiloRojo = {\n        backgroundColor : 'red',\n        color: 'white'\n    }\n    const { sector , sospechosos , indigena , fecha_ingreso , fecha_def , inmusupr , id_registro , entidad_res , tipo_paciente , uci , cardiovascular , clasificacion_final , neumonia , hipertension , entidad_um , toma_muestra_antigeno , epoc , asma , origen , toma_muestra_lab , nacionalidad , pais_origen , rango_edad , embarazo , municipio_res , sexo , obesidad , habla_lengua_indi , intubado , fecha_actualizacion , fecha_sintomas , diabetes , edad , resultado_lab , clas_final_escrita , pais_nacionalidad , tabaquismo , otra_com , migrante , resultado_antigeno , entidad_nac , otro_caso , renal_cronica  } = fields\n    return (\n        <Fragment>\n            <tr style={ fecha_def !== 'NA'?  estiloRojo : {}}>\n                <td>{ sector }</td>\n                <td>{ sospechosos }</td>\n                <td>{ indigena }</td>\n                <td>{ fecha_ingreso }</td>\n                <td>{ fecha_def }</td>\n                <td>{ inmusupr }</td>\n                <td>{ id_registro }</td>\n                <td>{ entidad_res }</td>\n                <td>{ tipo_paciente }</td>\n                <td>{ uci }</td>\n                <td>{ cardiovascular }</td>\n                <td>{ clasificacion_final }</td>\n                <td>{ neumonia }</td>\n                <td>{ hipertension }</td>\n                <td>{ entidad_um }</td>\n                <td>{ toma_muestra_antigeno }</td>\n                <td>{ epoc }</td>\n                <td>{ asma }</td>\n                <td>{ origen }</td>\n                <td>{ toma_muestra_lab }</td>\n                <td>{ nacionalidad }</td>\n                <td>{ pais_origen }</td>\n                <td>{ rango_edad }</td>\n                <td>{ embarazo }</td>\n                <td>{ municipio_res }</td>\n                <td>{ sexo }</td>\n                <td>{ obesidad }</td>\n                <td>{ habla_lengua_indi }</td>\n                <td>{ intubado }</td>\n                <td>{ fecha_actualizacion }</td>\n                <td>{ fecha_sintomas }</td>\n                <td>{ diabetes }</td>\n                <td>{ edad }</td>\n                <td>{ resultado_lab }</td>\n                <td>{ clas_final_escrita }</td>\n                <td>{ pais_nacionalidad }</td>\n                <td>{ tabaquismo }</td>\n                <td>{ otra_com }</td>\n                <td>{ migrante }</td>\n                <td>{ resultado_antigeno }</td>\n                <td>{ entidad_nac }</td>\n                <td>{ otro_caso }</td>\n                <td>{ renal_cronica }</td>\n\n            </tr>\n        </Fragment>\n    )\n}\n","import React, { Fragment } from 'react'\n\nconst Parametros = ({ parametros }) => {\n\n\nconst { sector , sospechosos , indigena , fecha_ingreso , fecha_def , inmusupr , id_registro , entidad_res , tipo_paciente , uci , cardiovascular , clasificacion_final , neumonia , hipertension , entidad_um , toma_muestra_antigeno , epoc , asma , origen , toma_muestra_lab , nacionalidad , pais_origen , rango_edad , embarazo , municipio_res , sexo , obesidad , habla_lengua_indi , intubado , fecha_actualizacion , fecha_sintomas , diabetes , edad , resultado_lab , clas_final_escrita , pais_nacionalidad , tabaquismo , otra_com , migrante , resultado_antigeno , entidad_nac , otro_caso , renal_cronica  } = parametros\n\n    return (\n        <Fragment>\n        \n                <th>{ sector }</th>\n                <th>{ sospechosos }</th>\n                <th>{ indigena }</th>\n                <th>{ fecha_ingreso }</th>\n                <th>{ fecha_def }</th>\n                <th>{ inmusupr }</th>\n                <th>{ id_registro }</th>\n                <th>{ entidad_res }</th>\n                <th>{ tipo_paciente }</th>\n                <th>{ uci }</th>\n                <th>{ cardiovascular }</th>\n                <th>{ clasificacion_final }</th>\n                <th>{ neumonia }</th>\n                <th>{ hipertension }</th>\n                <th>{ entidad_um }</th>\n                <th>{ toma_muestra_antigeno }</th>\n                <th>{ epoc }</th>\n                <th>{ asma }</th>\n                <th>{ origen }</th>\n                <th>{ toma_muestra_lab }</th>\n                <th>{ nacionalidad }</th>\n                <th>{ pais_origen }</th>\n                <th>{ rango_edad }</th>\n                <th>{ embarazo }</th>\n                <th>{ municipio_res }</th>\n                <th>{ sexo }</th>\n                <th>{ obesidad }</th>\n                <th>{ habla_lengua_indi }</th>\n                <th>{ intubado }</th>\n                <th>{ fecha_actualizacion }</th>\n                <th>{ fecha_sintomas }</th>\n                <th>{ diabetes }</th>\n                <th>{ edad }</th>\n                <th>{ resultado_lab }</th>\n                <th>{ clas_final_escrita }</th>\n                <th>{ pais_nacionalidad }</th>\n                <th>{ tabaquismo }</th>\n                <th>{ otra_com }</th>\n                <th>{ migrante }</th>\n                <th>{ resultado_antigeno }</th>\n                <th>{ entidad_nac }</th>\n                <th>{ otro_caso }</th>\n                <th>{ renal_cronica }</th>\n        \n        </Fragment>\n    )\n}\n\nexport default Parametros\n","\nimport React, { Fragment, useEffect } from 'react'\nimport { useIndexedDB } from 'react-indexed-db'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { yaEstaEnBase } from '../helpers/fun'\nimport { setNumeroRegistros } from '../redux/ducks/EstadosDuck'\nimport { Estado } from './Estado'\nimport Parametros from './Parametros'\n\n\n\n\nexport const EstadosComponent = () => {\n\n    const db = useIndexedDB('covFechas')\n    const dispatch = useDispatch()\n    const { datos , fecha:{ fechaServidor } , parametros , numeroRegistros  } = useSelector(state => state.datos)\n\n    \n    \n    if (datos.length === 0) {\n        console.log( 'no llegaron' );\n    }\n\n    const handleChange = ( e )=> {\n        console.log(e.target.value)\n        dispatch(\n            setNumeroRegistros( e.target.value )\n        )\n        \n    }\n\n\n    useEffect(() => {\n        if ( fechaServidor !== '' ||  datos.length > 0) {\n            db.add({\n                'fecha' : fechaServidor,\n                'datos' : datos\n            }).then(e => {\n                console.log(e)\n            })\n        }\n\n        db.getAll().then(res => {\n            \n        const { arrSinDuplicaciones } =  yaEstaEnBase( res )\n            console.log( arrSinDuplicaciones );\n        })\n\n        console.log(numeroRegistros)\n\n\n\n    }, [datos, db, fechaServidor, numeroRegistros])\n\n\n\n\n    return (\n        <div className=\"m-5\">\n    \n            <h1>Estados</h1>\n                <div className=\"row\">\n                <input \n                    type=\"number\" \n                    name=\"Numberr\" \n                    id=\"inputNumberr\" \n                    className=\"form-control\" \n                    defaultValue \n                    min={ 100 } \n                    max={ 1000 } \n                    step={ 100 } \n                    required=\"required\"\n                    onChange={ (e)=> handleChange(e) }\n\n                    />\n\n                </div>\n            <div className=\"table-responsive\" style={ {\n                height: '80vh'\n            } }>\n            <table className=\"table table-hover  table-dark \">\n            <thead style={{\n            \n                backgroundColor:'#01599d'\n            }}>\n                <tr>\n                    { \n                        <Fragment>\n                            <Parametros  parametros={ parametros }  />\n                        </Fragment>\n                    \n                    }\n                </tr>\n            \n            </thead>\n            <tbody>\n\n            {\n                datos.map(({ recordid  , fields }) => {\n\n                    return (\n                        <Fragment key={ recordid }>\n                            <Estado fields={ fields } />\n                        </Fragment>\n                    )\n                })\n            }\n                \n                \n            </tbody>\n        </table>\n            </div>\n            \n        \n\n        </div>\n    )\n}\n","\nexport const urlGeneral = ( cantidad = 100 ) => {\n    return  `https://datos.cdmx.gob.mx/api/records/1.0/search/?dataset=casos-asociados-a-covid-19&q=&rows=${cantidad}&facet=fecha_actualizacion&facet=id_registro&facet=sector&facet=entidad_um&facet=sexo&facet=entidad_nac&facet=entidad_res&facet=municipio_res&facet=tipo_paciente&facet=fecha_ingreso&facet=fecha_def&facet=edad&facet=nacionalidad&facet=rango_edad&facet=resultado_lab&facet=clasificacion_final&facet=clas_final_escrita&facet=confirmados&facet=sospechosos&facet=negativos&refine.entidad_res=CIUDAD+DE+M%C3%89XICO`;\n}\nexport const urlHospitales = ( cantidad = 100 , fecha = '2020%2F12%2F20') => {\n    return  `https://datos.cdmx.gob.mx/api/records/1.0/search/?dataset=capacidad-hospitalaria&q=&rows=${cantidad}&facet=fecha&facet=nombre_hospital&facet=institucion&facet=estatus_capacidad_hospitalaria&facet=estatus_capacidad_uci&refine.fecha=${fecha}`;\n}\n\n","import { losDatos } from './../helpers/fun';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react'\nimport { EstadosComponent } from './EstadosComponent';\nimport { getDatos } from '../redux/ducks/EstadosDuck';\nimport { urlGeneral } from '../helpers/urls';\n\nexport const Contenedor = () => {\n    const dispatch = useDispatch()\n    const { numeroRegistros } = useSelector(state => state.datos)\n    \n\n    useEffect(() => {\n        try {\n            console.log(numeroRegistros)\n            const url = urlGeneral( numeroRegistros )\n            console.log( url )\n            losDatos( url ).then( res => {\n                dispatch(\n                    getDatos( res )\n                )\n        \n            })\n            \n        } catch (e) {\n            \n        } \n\n\n    }, [dispatch, numeroRegistros])\n\n\n    return (\n        <div style={{\n            backgroundColor:'white'\n        }}>\n            <EstadosComponent />\n            \n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\nimport { alertas } from '../../helpers/fun'\n\nexport const Hospital = ( {fields} ) => {\n    const { estatus_capacidad_hospitalaria , fecha , coordenadas , institucion , nombre_hospital , estatus_capacidad_uci  } = fields\n\n    return (\n        <Fragment>\n        <tr >\n                <td style={ \n            alertas( estatus_capacidad_hospitalaria )\n        }>{estatus_capacidad_hospitalaria}</td>\n                <td>{fecha}</td>\n                <td>{coordenadas}</td>\n                <td>{institucion}</td>\n                <td>{nombre_hospital}</td>\n                <td>{estatus_capacidad_uci}</td>\n        </tr>\n        </Fragment>\n    )\n}\n","import React, { Fragment } from 'react'\n\nexport const ParametrosHospital = ({parametrosH}) => {\n\n    const { estatus_capacidad_hospitalaria , fecha , coordenadas , institucion , nombre_hospital , estatus_capacidad_uci  } = parametrosH\n\n    return (\n        <Fragment>\n                <td>{estatus_capacidad_hospitalaria}</td>\n                <td>{fecha}</td>\n                <td>{coordenadas}</td>\n                <td>{institucion}</td>\n                <td>{nombre_hospital}</td>\n                <td>{estatus_capacidad_uci}</td>\n        </Fragment>\n    )\n}\n","/* eslint-disable no-unused-vars */\nimport { setInputFechaDuck, setNombreHospitales , putDatos} from './../../redux/ducks/HospitalesDuck';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { Hospital } from './Hospital';\nimport { ParametrosHospital } from './ParametrosHospital';\nimport { convertirFecha, losDatos } from '../../helpers/fun';\nimport { urlHospitales } from '../../helpers/urls';\n\n\nexport const HospitalesComponent = () => {\n\n    // https://github.com/dieguezguille/ThreeAct-Test\n    const {datosH , parametrosH , nombresHospitales , fechaHInput} = useSelector(state => state.hospitales)\n    const dispatch = useDispatch()\n    const [fechaInputS, setFechaIntputS] = useState('');\n\n    const handleChange = ( e ) => {\n        let fecha = e.target.value\n        \n        setFechaIntputS( fecha )\n\n    }\n\n    useEffect(()=> {\n        \n        let nombresDeLosHospitales = datosH.map((datoH) => {\n                    return datoH.fields.nombre_hospital\n                })\n\n                \n        dispatch(\n            setNombreHospitales(\n                nombresDeLosHospitales\n            )\n        )\n\n        dispatch(\n            setInputFechaDuck(fechaInputS)\n        )\n\n    },[fechaInputS , datosH , dispatch ])\n\n\n\n    return (\n        <div className=\"m-5\">\n    \n            <h1>Hospitales</h1>\n                                <div className=\"row\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleSelect\">Buscar por hospital</label>\n                        <select className=\"custom-select\" id=\"exampleSelect\">\n                            {\n                                nombresHospitales.map(nombre=>{\n                                    return(\n                                        <Fragment key={nombre}>\n                                            <option value={nombre}>{nombre}</option>\n                                        </Fragment>\n                                    )\n                                })\n                            }\n                        </select>\n                    </div>\n\n    \n\n                <input \n                    type=\"number\" \n                    name=\"Numberr\" \n                    id=\"inputNumberr\" \n                    className=\"form-control\" \n                    defaultValue \n                    min={ 100 } \n                    max={ 1000 } \n                    step={ 100 } \n                    required=\"required\"\n                    // onChange={ (e)=> handleChange(e) }\n\n                    />\n\n                    <input className=\"form-control\" onChange={(e)=> handleChange(e) }  type=\"date\" />\n\n                </div>\n            <div className=\"table-responsive\" style={ {\n                height: '80vh'\n            } }>\n            <table className=\"table table-hover   table-dark \">\n            <thead style={{\n            \n                backgroundColor:'#292b2c'\n            }}>\n                <tr>\n                    { \n                        <Fragment>\n                            <ParametrosHospital  parametrosH={ parametrosH }  />\n                        </Fragment>\n                    \n                    }\n                </tr>\n            \n            </thead>\n            <tbody>\n\n            {\n                datosH.map(({ recordid  , fields }) => {\n\n                    return (\n                        <Fragment key={ recordid }>\n                            <Hospital fields={ fields } />\n                        </Fragment>\n                    )\n                })\n            }\n                \n                \n            </tbody>\n        </table>\n            </div>\n            \n        \n\n        </div>\n    )\n}\n","import { fechaStageH } from './../../redux/ducks/HospitalesDuck';\nimport React, { useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { formatearFechas, losDatos } from '../../helpers/fun'\nimport { urlHospitales } from '../../helpers/urls'\nimport { getDatosH } from '../../redux/ducks/HospitalesDuck'\nimport { HospitalesComponent } from './HospitalesComponent';\n\nexport const ContenedorHospitales = () => {\n\n\n    const dispatch = useDispatch()\n\n\n    const { numeroRegistrosHospitales } = useSelector(state => state.hospitales)\n    \n    useEffect(() => {\n        \n        const hoy = new Date()\n        const [ hoyF ] = formatearFechas( hoy )\n        console.log(hoyF);\n        try {\n            dispatch(\n                fechaStageH()\n            )\n            const url = urlHospitales( numeroRegistrosHospitales , '2020%2F1%2F1')\n            console.log(url )\n            losDatos( url ).then(result => {\n                    \n                dispatch(\n                    getDatosH( result )\n                )\n                            \n        \n            })\n        } catch (e) {\n        \n        }\n    },[dispatch , numeroRegistrosHospitales])\n\n\n    return (\n\n        <div style={{\n            backgroundColor:'white'\n        }}>\n    \n            <HospitalesComponent/>\n    \n        </div>\n    )\n}\n","import React, { useRef } from \"react\";\nimport { OrbitControls } from \"drei\";\nimport { useThree, useFrame } from \"react-three-fiber\";\n\nexport const Controls = ({\n    autoRotate,\n    enabled,\n    target\n  }) => {\n    const controls = useRef();\n    const { camera, gl } = useThree();\n\n    useFrame(() => {\n        if (controls && controls.current && controls.current.update && enabled) {\n            controls.current?.update();\n        }\n    });\n\n    return enabled ? <OrbitControls\n        enabled={enabled}\n        ref={controls}\n        target={target}\n        args={[camera, gl.domElement]}\n        enableDamping\n        enableZoom={true}\n        enableKeys={false}\n        enablePan={false}\n        dampingFactor={0.1}\n        rotateSpeed={0.3}\n        autoRotate={autoRotate}\n        autoRotateSpeed={0.4}/> :\n        null\n}\n\n","import { useThree } from \"react-three-fiber\";\n\nexport const Navigation = ({\n  cameraPosition,\n  cameraTarget,\n}) => {\n\n  const { camera } = useThree();\n  camera.position.set(...cameraPosition);\n  camera.lookAt(...cameraTarget);\n  camera.updateProjectionMatrix();\n\n  return null;\n}\n\n","import { useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport Nav from \"react-bootstrap/esm/Nav\";\nimport React from \"react\";\n\nexport const NavLink = (props)  => {\n\n  const [hovered, setHovered] = useState(false);\n  const AnimatedNavLink = animated(Nav.Link);\n\n  const linkSpring = useSpring({\n    transform: hovered ? 'scale(1.1)' : 'scale(1)',\n    padding: 3,\n    margin: '0.5rem 1rem',\n    borderRadius: '5px',\n    backgroundColor: hovered ? 'rgba(0, 0, 0, 0.4)' : 'rgba(0, 0, 0, 0)',\n    color : 'white'\n  })\n\n  return (\n    <AnimatedNavLink onPointerOver={e => setHovered(true)} \n                      onPointerOut={e => setHovered(false)} \n                      style={{...linkSpring}} \n                      onClick={() => props.onNavLinkClicked(props.id , props.position , props.cameraPos)}>\n      {props.name}\n    </AnimatedNavLink>\n  );\n}\n\n","import { useSelector } from 'react-redux';\nimport React, { Fragment } from 'react'\nimport { NavLink } from '../NavLink/NavLink';\n\nexport const NavH = ( { markers , onNavigationItemClicked} ) => {\n\n    const { markersRedux } = useSelector(state => state.planetas)\n    return (\n    <Fragment>\n        {\n        markersRedux ? (\n            markersRedux.map(marker =>(\n                <NavLink key = { marker.id } \n                        id = { marker.id }\n                        name = { marker.name }\n                        cameraPos={marker.cameraPos}\n                        position={ marker.position }\n                        onNavLinkClicked= { onNavigationItemClicked}\n                />\n            ))\n        ) : null\n    }\n    </Fragment>\n\n    //     <Fragment>\n    //         <NavLink\n    //     id={1}\n    //     name={markers[1].name}\n    //     onNavLinkClicked={onNavigationItemClicked}>\n    // </NavLink>\n    // <NavLink\n    //     id={2}\n    //     name={markers[2].name}\n    //     onNavLinkClicked={onNavigationItemClicked}>\n    // </NavLink>\n    // <NavLink\n    //     id={3}\n    //     name={markers[3].name}\n    //     onNavLinkClicked={onNavigationItemClicked}>\n    // </NavLink>\n    //     </Fragment>\n    \n    )\n}\n","import { useSelector } from 'react-redux';\nimport { Nav } from 'react-bootstrap';\nimport { NavLink } from './../NavLink/NavLink';\nimport React, { Fragment } from 'react'\nimport { NavH } from './NavH';\n\nexport const NavsHospitales = ({ markers, onNavigationItemClicked }) => {\n    const { titulo } = useSelector(state => state.planetas)\n\n    return (\n        <Fragment>\n            <h2 className=\"title\" \n                onClick={() => onNavigationItemClicked(0)}>\n                {\n                    titulo\n                }\n            </h2>\n            <div className=\"form-group\">\n                <input type=\"date\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\n            </div>\n\n            <div className=\"cH\">\n            \n            <Nav defaultActiveKey=\"/home\" className=\"flex-column\">\n                \n                <NavH\n                    markers={markers}\n                    onNavigationItemClicked={onNavigationItemClicked}\n                />\n            </Nav>\n            </div>\n\n        </Fragment>\n    )\n}\n","import React from \"react\";\nimport { Html } from \"drei\";\nimport Nav from \"react-bootstrap/esm/Nav\";\nimport { useSpring, animated, config } from \"react-spring\";\n\nexport const  Marker = (props) =>  {\n\n  const markerSpring = useSpring({\n    opacity: 1,\n    from: {\n      opacity: 0,\n    },\n    config: config.slow,\n  })\n\n  const infoSpring = useSpring({\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    display: 'flex',\n    transform: props.id === props.selected ? 'scale(1)' : 'scale(0)',\n    from: {\n      transform: 'scale(0)'\n    }\n  })\n\n  function onClick() {\n    console.log(props)\n    props.onMarkerClicked(props.id , props.position , props.cameraPos);\n    \n  }\n\n  return (\n    <mesh position={props.position}>\n      <Html scaleFactor={100}>\n        <animated.div className=\"overlay\" style={markerSpring} onClick={onClick}>\n          <div className=\"circle box\">{props.id}</div>\n          <div className=\"box\">\n            <Nav.Link className=\"text-overlay\">{props.name}</Nav.Link>\n          </div>\n        </animated.div>\n        <animated.div className=\"info\" style={infoSpring}>\n          <p>\n            Datos del hospital\n          </p>\n          {\n            props.position\n          }\n        </animated.div>\n      </Html>\n    </mesh>\n  );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Marker } from './Marker'\n\nexport const CMarker = ({markers, selectedItemIndex , onNavigationItemClicked , markers2}) => {\n    \n    const [markerNow, setmarkerNow] = useState([])\n\n    useEffect(()=>{\n        if( markers2.length > 1 ) {\n            setmarkerNow(\n                markers2\n            )\n\n        }\n\n\n    } , [markers2 ])\n\n\n    \n\n    return (\n        <group>\n            {\n                markers2.length > 1 ? (\n                    markers2.map(maker => (\n                        <Marker\n                            key={ maker.id+1 }\n                            position={maker.position}\n                            name={maker.name}\n                            cameraPos={maker.cameraPos}\n                            id={maker.id}\n                            selected={selectedItemIndex}\n                            onMarkerClicked={onNavigationItemClicked} \n\n                    />\n                        \n                        )\n                    )\n                ): null\n            }\n                <Marker\n                    position={markers[1].position}\n                    name={markers[1].name}\n                    id={1}\n                    selected={selectedItemIndex}\n                    onMarkerClicked={onNavigationItemClicked} />\n                <Marker\n                    position={markers[2].position}\n                    name={markers[2].name}\n                    id={2}\n                    selected={selectedItemIndex}\n                    onMarkerClicked={onNavigationItemClicked} />\n                <Marker\n                    position={markers[3].position}\n                    name={markers[3].name}\n                    id={3}\n                    selected={selectedItemIndex}\n                    onMarkerClicked={onNavigationItemClicked} />\n                </group>\n\n    )\n}\n","export const colores = {\n    'verde' :'rgb(0, 105, 92)',\n    'rojo' : 'rgb(255, 23, 68)',\n    'amarillo' : 'rgb(255, 214, 0)'\n}","import { colores } from './../../../../helpers/colores';\n\n\n// import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { useSelector } from 'react-redux';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nexport default function Room(props) {\n  const group = useRef()\n  const planet = useRef();\n  // useFrame(() => (planet.current.rotation.y += 0.09));\n  // const { nodes } = useLoader(GLTFLoader, './modelos/scene.gltf')\n\n  console.log(props.markers2)\n\n  const colorH = ( col ) => {\n    let colorPlaneta \n    switch (col) {\n      case 'Crítica':\n        colorPlaneta = colores.rojo\n        break;\n      case 'Media' :\n        colorPlaneta = colores.amarillo\n        break;\n      case 'Buena' : \n        colorPlaneta = colores.verde\n        break;\n      default:\n        colorPlaneta = colores.verde\n        break;\n    }\n\n\n    return colorPlaneta\n  }\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group >\n        <group >\n          <mesh visible userData={{ test: \"hello\" }} ref={planet} position={[0, 0, 0]} autoRotate={true} autoRotateSpeed={0.2} >\n            <sphereGeometry attach=\"geometry\" args={[5, 7, 16]} />\n            <meshStandardMaterial attach=\"material\" color={colores.amarillo} />\n          </mesh>\n\n          {\n            props.markers2.map(marker=>(\n              <mesh visible userData={{ test: \"hello\" }} ref={planet} position={marker.position} autoRotate={true} autoRotateSpeed={0.2} >\n                <sphereGeometry attach=\"geometry\" args={[5, 7, 16]} />\n                <meshStandardMaterial attach=\"material\" color={colorH( marker.estatus_capacidad_hospitalaria )} />\n                </mesh>\n            ))\n          }\n\n        {/*\n            <mesh userData={{ test: \"hello\" }} ref={planet} position={[6, 6, 6]} rotation={[0, 0, 0]} autoRotate={true} autoRotateSpeed={0.2} >\n            <sphereGeometry attach=\"geometry\" args={[1, 20, 10]} />\n            <meshPhongMaterial attach=\"material\" color={colores.rojo} />\n          </mesh>\n\n          <mesh visible ref={planet} position={[7,7,7]}  >\n            <sphereGeometry attach=\"geometry\" args={[ 1, 32, 32 ]} />\n            <meshPhongMaterial attach=\"material\" color={colores.verde} />\n          </mesh>\n        */}\n\n        </group>\n\n      </group>\n\n    </group>\n  )\n}\n","import React from 'react'\nimport Room from './Room'\n\nexport const CRoom = ({position , markers2 }) => {\n  \n    \n    return (\n       \n            <Room \n                position = { position }\n                markers2 = { markers2 }/>\n        \n    )\n}\n","import { Stars } from 'drei';\nimport React, { useEffect } from 'react'\nimport { Suspense, useState } from 'react';\n\nimport { Canvas, extend } from 'react-three-fiber';\nimport { Controls } from './componentesThree/Controls/Controls';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { Navigation } from './componentesThree/Navigation/Navigation';\nimport { useSpring, animated, config } from \"react-spring\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavsHospitales } from './componentesThree/NavsHospitales/NavsHospitales';\nimport { Random } from 'random-js';\nimport { CMarker } from './componentesThree/Marker/CMarker';\nimport { crearMaker } from '../../helpers/fun';\nimport { setMakers } from '../../redux/ducks/PlanetasDuck';\nimport { CRoom } from './componentesThree/Room/CRoom';\n\n\n\nlet selectedItemIndex\n\nconst initialCameraPos = [18, 18, 18];\nconst initialControlsTarget = [0, 0, 0];\n\nextend({ OrbitControls })\n\n\nexport const CPlanetas = () => {\n  \n  const { datos , markerRedux } = useSelector(state => state.planetas)\n  const [bandera, setBandera] = useState(0)\n  const dispatch = useDispatch()\n  let markers2 = [\n    {\n            position: [0, 0, 0],\n            cameraPos: [18, 18, 18],\n            name: \"camaraCentral\" ,\n            loc : [] ,\n            estatus_capacidad_hospitalaria : \"\"\n        }\n  ]\n  const random = new Random()\n  const [markers] = useState([\n    {\n        position: [0, 0, 0],\n        cameraPos: [18, 18, 18],\n        name: \"Titulo\" \n    },\n    {\n        position: [-12, 10, 2],\n        cameraPos: [3, 9, 2],\n        name: \"Estado 1\",\n    },\n    {\n        position: [0, 10, -7],\n        cameraPos: [0, 10, 9],\n        name: \"Estado 2\",\n    },\n    {\n        position: [0, 6, 2],\n        cameraPos: [9, 8, 14],\n        name: \"Estado 3\",\n    },\n    ]);\n\n  let id = 1\n  datos.forEach(dato => {\n    let uno = random.integer(-100,100)\n    let dos = random.integer(-100,100)\n    let tres = random.integer(-100,100)\n\n    \n    markers2 = [\n      ...markers2 ,\n          {\n        position:[uno , dos , tres],\n        cameraPos : [uno , dos , tres + 10],\n        name: dato.fields.nombre_hospital ,\n        id : id ,\n        loc : dato.fields.coordenadas ,\n        estatus_capacidad_hospitalaria :dato.fields.estatus_capacidad_hospitalaria\n      }\n    ]\n    id ++\n  })\n\n\n  useEffect(() => {\n    if( bandera === 1 ){\n      const [ d ] = crearMaker( datos )\n      console.log( datos )\n      dispatch( \n        setMakers( \n          markers2\n        )\n      )\n          \n      \n    }\n\n    setBandera(bandera +1 )\n    \n  \n  }, [datos ])\n    \n  \n\n\n\n    const AnimatedNavigation = animated(Navigation);\n\n    const [isAnimating, setIsAnimating] = useState(false);\n\n    const [cameraValues, setCameraValues] = useState({\n        cachedPos: initialCameraPos,\n        cachedTarget: initialControlsTarget,\n        pos: initialCameraPos,\n        target: initialControlsTarget,\n        autoRotate: true,\n    });\n\n    const cameraSpring = useSpring({\n        pos: cameraValues.pos,\n        target: cameraValues.target,\n        from: {\n            pos: cameraValues.cachedPos,\n            target: cameraValues.cachedTarget\n    },\n        config: config.slow,\n        onRest: () => setIsAnimating(false)\n    })\n\n    const  onNavigationItemClicked = (id ,  position , cameraPos) => {\n    \n      alert(position)\n      alert(cameraPos)\n    if (selectedItemIndex !== id && !isAnimating) {\n            selectedItemIndex = id;\n            setIsAnimating(true);\n            setCameraValues({\n            cachedPos: cameraValues.pos,\n            cachedTarget: cameraValues.cachedTarget,\n            pos: cameraPos,\n            target: position,\n            autoRotate: id === 0,\n        });\n        }\n    }\n\n    return (\n        <div className=\"content\">\n          <div className=\"ui\">\n          \n            <NavsHospitales onNavigationItemClicked={onNavigationItemClicked} markers={markers}/>\n        \n          </div>\n          {\n            markers.length === 0 ? null :\n            <Canvas>\n      \n            <ambientLight />\n            <pointLight\n              position={[100, 100, 100]}\n              intensity={2} />\n            <AnimatedNavigation\n              cameraPosition={cameraSpring.pos}\n              cameraTarget={cameraSpring.target} />\n              <CRoom \n                    position={[0, 0, 0]}\n                    markers2={ markers2 }\n                    />\n              \n              {isAnimating && markers !== undefined ? null :\n                <CMarker markers={markers}\n                        markers2={ markers2 }\n                        \n                        selectedItemIndex={selectedItemIndex}\n                        onNavigationItemClicked={onNavigationItemClicked}\n                />\n              \n                \n                }\n                <Suspense/>\n            <Controls\n              enabled={!isAnimating}\n              autoRotate={cameraValues.autoRotate}\n              target={cameraValues.target} />\n            <Stars\n              radius={100}\n              depth={100}\n              count={10000}\n              factor={6}\n              saturation={0}\n              fade={true} />\n          </Canvas>\n      \n          }\n        </div>)\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { losDatos } from '../../../helpers/fun'\nimport { urlHospitales } from '../../../helpers/urls'\nimport { getHospitalesP, setFechaPlanetas } from '../../../redux/ducks/PlanetasDuck'\nimport { CPlanetas } from '../CPlanetas'\nimport '../../../planetaStyle.css'\n\nexport const ContenedorPlanetas = () => {\n\n    const hoy = new Date()\n    // console.log(hoy)\n    \n    const dispatch = useDispatch()\n    // const [ fechaHoy ] = formatearFechas( new Date() )\n    // const [fechaHoyF] = convertirFecha( fechaHoy )\n    // console.log( fechaHoy )\n    const fechaHoy = '2021%2F01%2F08'\n    dispatch(\n        setFechaPlanetas(fechaHoy)\n    )\n\n    const url = urlHospitales( 50 , fechaHoy)\n    losDatos( url ).then(res => {\n        console.log(res)\n        dispatch(\n            getHospitalesP( res )\n        )\n    })\n    \n\n\n\n    return (\n        <div>\n            <CPlanetas/>\n        </div>\n    )\n}\n","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from 'react-router-dom';\nimport { Contenedor } from '../components/Contenedor';\nimport { ContenedorHospitales } from '../components/hospitales/ContenedorHospitales';\nimport { ContenedorPlanetas } from '../components/interactivo/componentesThree/ContenedorPlanetas';\n\n\nexport const AppRouter = () => {\n    return (\n        <Router>\n         <div >\n        <Switch>\n\n            <Route \n                exact \n                path=\"/estados\" \n                component={ Contenedor }\n            />\n            <Route \n                exact\n                path=\"/hospitales\"\n                component={ ContenedorHospitales }\n            />\n\n            <Route \n                exact\n                path=\"/planetas\"\n                component={ ContenedorPlanetas }\n            />\n            <Route \n                exact\n                path=\"/\"\n                component={ ContenedorPlanetas }\n            />\n\n            <Redirect to=\"/\" />   \n        </Switch>\n        </div>\n\n        \n        </Router>\n    )\n}\n","import { Provider } from 'react-redux';\nimport { store } from './redux/store/store';\nimport { AppRouter } from './router/AppRouter';\nimport { initDB } from 'react-indexed-db'\nimport { DBConfig } from './config/DBConfig'\nimport './index.css'\n\ninitDB( DBConfig ) \n\nexport  const  App = ()=> {\n  return (\n\n    <Provider  store={ store } >\n     <div >\n        <AppRouter/>\n    </div>\n    </Provider>\n  )\n  \n}\n\n\n\n","export const DBConfig = {\n    name:'covDB',\n    version : 1 ,\n    objectStoresMeta : [\n        {\n            store : 'covFechas' ,\n            storeConfig:{\n                keypath: 'id',\n                autoIncrement : true\n            },\n            storeSchema : [\n                {\n                    name : 'hoy',\n                    keypath: 'hoy',\n                    options:{\n                        unique :false\n                }\n                },{\n                    name: 'datos',\n                    keypath : 'datos',\n                    options:{\n                        unique: false\n                    }\n                }\n            ]\n        }\n    ]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}